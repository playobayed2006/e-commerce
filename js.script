
// Hero slider functionality with fade and background animation

const slides = document.querySelectorAll('.hero-slide');
const dots = document.querySelectorAll('.dot');
const heroSection = document.querySelector('.hero-section');
let current = 0;
let timer;

// Backgrounds for each slide
const backgrounds = [
    'linear-gradient(90deg, #f3f5f7 0%, #e0f7fa 100%)',
    'linear-gradient(90deg, #f3f5f7 0%, #ffe0e0 100%)',
    'linear-gradient(90deg, #f3f5f7 0%, #fffde7 100%)'
];

function showSlide(idx) {
    slides.forEach((slide, i) => {
        slide.classList.remove('active', 'fade-in');
        if (i === idx) {
            slide.classList.add('active', 'fade-in');
        }
    });
    dots.forEach((dot, i) => {
        dot.classList.toggle('active', i === idx);
    });
    heroSection.style.background = backgrounds[idx];
    current = idx;
}

function nextSlide() {
    let next = (current + 1) % slides.length;
    showSlide(next);
}

function startSlider() {
    timer = setInterval(nextSlide, 4000);
}

function stopSlider() {
    clearInterval(timer);
}

dots.forEach((dot, i) => {
    dot.addEventListener('click', () => {
        stopSlider();
        showSlide(i);
        startSlider();
    });
});

showSlide(0);
startSlider();





// Mouse drag/swipe and touch support
let startX = null;
let isDragging = false;
const slider = document.querySelector('.hero-slider');

slider.addEventListener('mousedown', (e) => {
    isDragging = true;
    startX = e.clientX;
    slider.style.userSelect = 'none';
});
slider.addEventListener('mousemove', (e) => {
    if (!isDragging) return;
    let diff = e.clientX - startX;
    if (Math.abs(diff) > 60) {
        if (diff < 0) {
            stopSlider();
            nextSlide();
            startSlider();
        } else {
            stopSlider();
            let prev = (current - 1 + slides.length) % slides.length;
            showSlide(prev);
            startSlider();
        }
        isDragging = false;
        startX = null;
    }
        // Loop left/right for category block
        const cardWidth = catBlock.firstElementChild.offsetWidth + 32;
        if (catBlock.scrollLeft <= 0) {
            catBlock.appendChild(catBlock.firstElementChild);
            catBlock.scrollLeft += cardWidth;
        } else if (catBlock.scrollLeft + catBlock.offsetWidth >= catBlock.scrollWidth) {
            catBlock.insertBefore(catBlock.lastElementChild, catBlock.firstElementChild);
            catBlock.scrollLeft -= cardWidth;
        }
});
slider.addEventListener('mouseup', () => {
    isDragging = false;
    startX = null;
    slider.style.userSelect = '';
});
slider.addEventListener('mouseleave', () => {
    isDragging = false;
    startX = null;
    slider.style.userSelect = '';
});

// Touch support for mobile
slider.addEventListener('touchstart', (e) => {
    isDragging = true;
    startX = e.touches[0].clientX;
});
slider.addEventListener('touchmove', (e) => {
    if (!isDragging) return;
    let diff = e.touches[0].clientX - startX;
    if (Math.abs(diff) > 60) {
        if (diff < 0) {
            stopSlider();
            nextSlide();
            startSlider();
        } else {
            stopSlider();
            let prev = (current - 1 + slides.length) % slides.length;
            showSlide(prev);
            startSlider();
        }
        isDragging = false;
        startX = null;
    }
        // Loop left/right for category block
        const cardWidth = catBlock.firstElementChild.offsetWidth + 32;
        if (catBlock.scrollLeft <= 0) {
            catBlock.appendChild(catBlock.firstElementChild);
            catBlock.scrollLeft += cardWidth;
        } else if (catBlock.scrollLeft + catBlock.offsetWidth >= catBlock.scrollWidth) {
            catBlock.insertBefore(catBlock.lastElementChild, catBlock.firstElementChild);
            catBlock.scrollLeft -= cardWidth;
        }
});
slider.addEventListener('touchend', () => {
    isDragging = false;
    startX = null;
});




// Dynamic countdown for Day Of The Deal
(function() {
    // Set the deal end date (8 days from now)
    const dealEnd = new Date();
    dealEnd.setDate(dealEnd.getDate() + 8);
    dealEnd.setHours(18, 51, 0, 0); // Set to 18:51:00 for demo

    function pad(n) { return n < 10 ? '0' + n : n; }

    function updateCountdown() {
        const now = new Date();
        let diff = dealEnd - now;
        if (diff < 0) diff = 0;
        const days = Math.floor(diff / (1000 * 60 * 60 * 24));
        const hours = Math.floor((diff / (1000 * 60 * 60)) % 24);
        const mins = Math.floor((diff / (1000 * 60)) % 60);
        const secs = Math.floor((diff / 1000) % 60);
        // Update DOM
        const daysEl = document.querySelector('.deal-days b');
        const timerEl = document.querySelector('.deal-countdown');
        if (daysEl && timerEl) {
            daysEl.textContent = days;
            timerEl.textContent = pad(hours) + ' : ' + pad(mins) + ' : ' + pad(secs);
        }
    }
    updateCountdown();
    setInterval(updateCountdown, 1000);
})();


//trending section start
document.querySelectorAll(".tab-menu li").forEach(tab => {
  tab.addEventListener("click", function () {
    // remove active from all
    document.querySelectorAll(".tab-menu li").forEach(t => t.classList.remove("active"));
    document.querySelectorAll(".tab-content").forEach(c => c.classList.remove("active"));

    // add active to clicked
    this.classList.add("active");
    document.getElementById(this.dataset.tab).classList.add("active");
  });
});
